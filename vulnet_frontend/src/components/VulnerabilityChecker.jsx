import React, { useState } from 'react';
import { fetchVulnerabilities } from '../api/osvServices.js';

const VulnerabilityChecker = () => {
    const [ecosystem, setEcosystem] = useState('npm');
    const [packageName, setPackageName] = useState('');
    const [vulnerabilityType, setVulnerabilityType] = useState('');
    const [vulnerabilities, setVulnerabilities] = useState(null);
    const [error, setError] = useState(null);

    const handleCheck = async () => {
        if (!packageName.trim()) {
            alert("Por favor, ingresa un nombre de paquete válido.");
            return;
        }

        setError(null);
        setVulnerabilities(null);

        try {
            const data = await fetchVulnerabilities(ecosystem, packageName);
            if (data?.vulns) {
                let filteredVulns = data.vulns;

                // Filtrar por tipo de vulnerabilidad si el usuario ha seleccionado una
                if (vulnerabilityType) {
                    filteredVulns = filteredVulns.filter(vuln => vuln.details.toLowerCase().includes(vulnerabilityType.toLowerCase()));
                }

                setVulnerabilities(filteredVulns);
            } else {
                setError("No se encontraron vulnerabilidades.");
            }
        } catch (err) {
            setError("Error al obtener los datos.");
        }
    };

    return (
        <div className="max-w-3xl mx-auto mt-10 bg-gray-900 text-white p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold mb-4 text-center">Buscador de Vulnerabilidades</h2>
            
            <div className="space-y-4">
                {/* Selector de Ecosistema */}
                <select 
                    value={ecosystem} 
                    onChange={(e) => setEcosystem(e.target.value)}
                    className="border border-gray-700 bg-gray-800 text-white p-2 rounded w-full"
                >
                    <option value="npm">npm (Node.js)</option>
                    <option value="PyPI">PyPI (Python)</option>
                    <option value="Maven">Maven (Java)</option>
                    <option value="Go">Go Modules</option>
                    <option value="RubyGems">RubyGems (Ruby)</option>
                    <option value="NuGet">NuGet (.NET/C#)</option>
                    <option value="Linux">Linux Kernel</option>
                    <option value="Debian">Debian Packages</option>
                    <option value="Alpine">Alpine Linux</option>
                    <option value="Rust">Rust Crates</option>
                </select>

                {/* Input para el nombre del paquete */}
                <input
                    type="text"
                    value={packageName}
                    onChange={(e) => setPackageName(e.target.value)}
                    placeholder="Ingrese el nombre del paquete"
                    className="border border-gray-700 bg-gray-800 text-white p-2 rounded w-full"
                />

                {/* Selector de Tipo de Vulnerabilidad */}
                <select 
                    value={vulnerabilityType} 
                    onChange={(e) => setVulnerabilityType(e.target.value)}
                    className="border border-gray-700 bg-gray-800 text-white p-2 rounded w-full"
                >
                    <option value="">Todos los tipos</option>
                    <option value="RCE">Remote Code Execution (RCE)</option>
                    <option value="XSS">Cross-Site Scripting (XSS)</option>
                    <option value="SQL Injection">SQL Injection</option>
                    <option value="LFI">Local File Inclusion (LFI)</option>
                    <option value="RFI">Remote File Inclusion (RFI)</option>
                    <option value="Deserialización">Deserialización Insegura</option>
                    <option value="Escalada de privilegios">Escalada de Privilegios</option>
                    <option value="Denegación de Servicio">Denegación de Servicio (DoS)</option>
                </select>

                {/* Botón de búsqueda */}
                <button 
                    onClick={handleCheck} 
                    className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full transition duration-200"
                >
                    Buscar
                </button>
            </div>

            {/* Mensajes de error */}
            {error && (
                <div className="mt-4 p-3 bg-red-600 text-white rounded">
                    {error}
                </div>
            )}

            {/* Resultados de vulnerabilidades */}
            {vulnerabilities && (
                <div className="mt-6">
                    <h3 className="font-bold text-lg mb-2">Resultados:</h3>
                    <ul className="space-y-3">
                        {vulnerabilities.map((vuln, index) => (
                            <li key={index} className="bg-gray-800 p-3 rounded-lg shadow">
                                <strong className="text-yellow-400">{vuln.id}</strong>: {vuln.summary} <br />
                                <a 
                                    href={vuln.references[0]?.url} 
                                    target="_blank" 
                                    rel="noopener noreferrer" 
                                    className="text-blue-400 hover:underline"
                                >
                                    Más información
                                </a>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};

export default VulnerabilityChecker;
